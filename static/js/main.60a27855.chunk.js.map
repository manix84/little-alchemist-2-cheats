{"version":3,"sources":["lib/data.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getLabels","elementsData","Object","entries","map","_ref","_ref2","slicedToArray","id","obj","label","name","image","imageURL","sort","a","b","nameA","toUpperCase","nameB","App","_useState","useState","_useState2","setElementsData","useEffect","asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","t0","fetch","then","response","json","catch","console","error","t1","sent","stop","apply","this","arguments","fetchData","prefersDarkMode","useMediaQuery","theme","React","useMemo","createTheme","palette","mode","react_default","createElement","ThemeProvider","CssBaseline","className","src","style","filter","alt","Fragment","Autocomplete","disablePortal","options","sx","width","renderOption","props","option","Box","assign","component","& > img","mr","flexShrink","loading","renderInput","params","TextField","Button","variant","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.60a27855.chunk.js","sourcesContent":["export type ElementsData = {\n  [key: string]: {\n    id: number;\n    name: string;\n    imageURL: string;\n    combinations?: string[][];\n    combination_ids?: number[][];\n    produces?: string[];\n    produce_ids?: number[];\n  };\n};\n\nexport const fetchElementsData = (): Promise<ElementsData> =>\n  fetch(\"data/elements.json\")\n    .then((response) => response.json())\n    .catch(console.error);\n\ntype Labels = { id: string; label: string; image: string }[];\nexport const getLabels = (elementsData: ElementsData): Labels =>\n  Object.entries(elementsData)\n    .map(([id, obj]) => ({\n      id,\n      label: obj.name,\n      image: obj.imageURL,\n    }))\n    .sort((a, b) => {\n      const nameA = a.label.toUpperCase(); // ignore upper and lowercase\n      const nameB = b.label.toUpperCase(); // ignore upper and lowercase\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n\n      // names must be equal\n      return 0;\n    });\n","import Autocomplete from \"@mui/material/Autocomplete\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport TextField from \"@mui/material/TextField\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { ElementsData, fetchElementsData, getLabels } from \"./lib/data\";\n\nexport const App = () => {\n  const [elementsData, setElementsData] = useState<ElementsData>();\n  useEffect(() => {\n    const fetchData = async () => {\n      setElementsData(await fetchElementsData());\n    };\n    fetchData();\n  }, []);\n\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n  const theme = React.useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode: prefersDarkMode ? \"dark\" : \"light\",\n        },\n      }),\n    [prefersDarkMode]\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className='App'>\n        <header className='header'>\n          <img\n            src={\"https://littlealchemy2.com/img/logo.2b0c661a.svg\"}\n            style={{ filter: \"drop-shadow(rgba(0, 0, 0, 0.5) 5px 5px 3px)\" }}\n            className='logo'\n            alt='Little Alchemy 2'\n          />\n          <p>Search for Elements</p>\n          {elementsData && (\n            <>\n              <Autocomplete\n                disablePortal\n                id='combo-box-demo'\n                options={getLabels(elementsData)}\n                sx={{ width: 300 }}\n                renderOption={(props, option) => (\n                  <Box component='li' sx={{ \"& > img\": { mr: 2, flexShrink: 0 } }} {...props}>\n                    <img\n                      loading='lazy'\n                      width='20'\n                      src={option.image}\n                      alt=''\n                      style={{ filter: \"drop-shadow(0 0 0 rgba(0,0,0,0.5))\" }}\n                    />\n                    {option.label}\n                  </Box>\n                )}\n                renderInput={(params) => <TextField {...params} label='Elements' />}\n              />\n              <Button variant={\"contained\"}>Search</Button>\n            </>\n          )}\n        </header>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}