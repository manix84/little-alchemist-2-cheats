{"version":3,"sources":["lib/data.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getLabels","elementsData","Object","entries","map","_ref","_ref2","slicedToArray","id","obj","label","name","image","imageURL","sort","a","b","nameA","toUpperCase","nameB","App","_useState","useState","_useState2","setElementsData","useEffect","asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","t0","fetch","then","response","json","catch","console","error","t1","sent","stop","apply","this","arguments","fetchData","react_default","createElement","className","src","alt","Fragment","Autocomplete","disablePortal","options","sx","width","renderOption","props","option","Box","assign","component","& > img","mr","flexShrink","loading","style","filter","renderInput","params","TextField","Button","variant","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0"],"mappings":"+QAkBaA,SAAY,SAACC,GAAD,OACvBC,OAAOC,QAAQF,GACZG,IAAI,SAAAC,GAAA,IAAAC,EAAAJ,OAAAK,EAAA,EAAAL,CAAAG,EAAA,GAAEG,EAAFF,EAAA,GAAMG,EAANH,EAAA,SAAgB,CACnBE,KACAE,MAAOD,EAAIE,KACXC,MAAOH,EAAII,YAEZC,KAAK,SAACC,EAAGC,GACR,IAAMC,EAAQF,EAAEL,MAAMQ,cAChBC,EAAQH,EAAEN,MAAMQ,cACtB,OAAID,EAAQE,GACF,EAENF,EAAQE,EACH,EAIF,uxMC5BN,IA2CQC,EA3CI,WAAM,IAAAC,EACiBC,qBADjBC,EAAArB,OAAAK,EAAA,EAAAL,CAAAmB,EAAA,GAChBpB,EADgBsB,EAAA,GACFC,EADED,EAAA,GASvB,OAPAE,oBAAU,YACO,eAAApB,EAAAH,OAAAwB,EAAA,EAAAxB,CAAAyB,IAAAC,KAAG,SAAAC,IAAA,OAAAF,IAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,GAChBV,EADgBO,EAAAE,KAAA,EDEpBE,MAAM,sBACHC,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BC,MAAMC,QAAQC,OCJG,OAAAV,EAAAW,GAAAX,EAAAY,MAAA,EAAAZ,EAAAG,IAAAH,EAAAW,IAAA,wBAAAX,EAAAa,SAAAf,MAAH,yBAAAxB,EAAAwC,MAAAC,KAAAC,YAAA,EAGfC,IACC,IAGDC,EAAAlC,EAAAmC,cAAA,OAAKC,UAAU,OACbF,EAAAlC,EAAAmC,cAAA,UAAQC,UAAU,cAChBF,EAAAlC,EAAAmC,cAAA,OAAKE,IAAK,mDAAoDD,UAAU,OAAOE,IAAI,qBACnFJ,EAAAlC,EAAAmC,cAAA,gCACCjD,GACCgD,EAAAlC,EAAAmC,cAAAD,EAAAlC,EAAAuC,SAAA,KACEL,EAAAlC,EAAAmC,cAACK,EAAA,EAAD,CACEC,eAAa,EACbhD,GAAG,iBACHiD,QAASzD,EAAUC,GACnByD,GAAI,CAAEC,MAAO,KACbC,aAAc,SAACC,EAAOC,GAAR,OACZb,EAAAlC,EAAAmC,cAACa,EAAA,EAAD7D,OAAA8D,OAAA,CAAKC,UAAU,KAAKP,GAAI,CAAEQ,UAAW,CAAEC,GAAI,EAAGC,WAAY,KAAWP,GACnEZ,EAAAlC,EAAAmC,cAAA,OACEmB,QAAQ,OACRV,MAAM,KACNP,IAAKU,EAAOlD,MACZyC,IAAI,GACJiB,MAAO,CAAEC,OAAQ,wCAElBT,EAAOpD,QAGZ8D,YAAa,SAACC,GAAD,OAAYxB,EAAAlC,EAAAmC,cAACwB,EAAA,EAADxE,OAAA8D,OAAA,GAAeS,EAAf,CAAuB/D,MAAM,iBAExDuC,EAAAlC,EAAAmC,cAACyB,EAAA,EAAD,CAAQC,QAAS,aAAjB,cC7BGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAA7C,KAAA4C,EAAAE,KAAA,WAAqB9C,KAAK,SAAA/B,GAAiD,IAA9C8E,EAA8C9E,EAA9C8E,OAAQC,EAAsC/E,EAAtC+E,OAAQC,EAA8BhF,EAA9BgF,OAAQC,EAAsBjF,EAAtBiF,OAAQC,EAAclF,EAAdkF,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCHDU,IAASC,WACpBC,SAASC,eAAe,SAErBC,OACH3C,EAAAlC,EAAAmC,cAACD,EAAAlC,EAAM8E,WAAP,KACE5C,EAAAlC,EAAAmC,cAAC4C,EAAD,QAOJjB","file":"static/js/main.a7aac5e5.chunk.js","sourcesContent":["export type ElementsData = {\n  [key: string]: {\n    id: number;\n    name: string;\n    imageURL: string;\n    combinations?: string[][];\n    combination_ids?: number[][];\n    produces?: string[];\n    produce_ids?: number[];\n  };\n};\n\nexport const fetchElementsData = (): Promise<ElementsData> =>\n  fetch(\"data/elements.json\")\n    .then((response) => response.json())\n    .catch(console.error);\n\ntype Labels = { id: string; label: string; image: string }[];\nexport const getLabels = (elementsData: ElementsData): Labels =>\n  Object.entries(elementsData)\n    .map(([id, obj]) => ({\n      id,\n      label: obj.name,\n      image: obj.imageURL,\n    }))\n    .sort((a, b) => {\n      const nameA = a.label.toUpperCase(); // ignore upper and lowercase\n      const nameB = b.label.toUpperCase(); // ignore upper and lowercase\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n\n      // names must be equal\n      return 0;\n    });\n","import Autocomplete from \"@mui/material/Autocomplete\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { ElementsData, fetchElementsData, getLabels } from \"./lib/data\";\n\nexport const App = () => {\n  const [elementsData, setElementsData] = useState<ElementsData>();\n  useEffect(() => {\n    const fetchData = async () => {\n      setElementsData(await fetchElementsData());\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <img src={\"https://littlealchemy2.com/img/logo.2b0c661a.svg\"} className='logo' alt='Little Alchemy 2' />\n        <p>Search for Elements</p>\n        {elementsData && (\n          <>\n            <Autocomplete\n              disablePortal\n              id='combo-box-demo'\n              options={getLabels(elementsData)}\n              sx={{ width: 300 }}\n              renderOption={(props, option) => (\n                <Box component='li' sx={{ \"& > img\": { mr: 2, flexShrink: 0 } }} {...props}>\n                  <img\n                    loading='lazy'\n                    width='20'\n                    src={option.image}\n                    alt=''\n                    style={{ filter: \"drop-shadow(0 0 0 rgba(0,0,0,0.5))\" }}\n                  />\n                  {option.label}\n                </Box>\n              )}\n              renderInput={(params) => <TextField {...params} label='Elements' />}\n            />\n            <Button variant={\"contained\"}>Search</Button>\n          </>\n        )}\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}